---

# Format Ref: https://cirrus-ci.org/guide/writing-tasks/

# Main collection of env. vars to set for all tasks and scripts.
env:
    # Actual|intended branch for this run
    DEST_BRANCH: "main"
    # The default is 'sh' if unspecified
    CIRRUS_SHELL: "/bin/bash"
    # Location where source repo. will be cloned
    CIRRUS_WORKING_DIR: "/var/tmp/netavark"
    # Rust package cache also lives here
    CARGO_HOME: "/var/cache/cargo"
    # Rust compiler output lives here (see Makefile)
    CARGO_TARGET_DIR: "$CIRRUS_WORKING_DIR/targets"
    # Save a little typing (path relative to $CIRRUS_WORKING_DIR)
    SCRIPT_BASE: "./contrib/cirrus"
    FEDORA_NAME: "fedora-35"
    IMAGE_SUFFIX: "c4801636756357120"
    FEDORA_NETAVARK_IMAGE: "fedora-netavark-${IMAGE_SUFFIX}"


gcp_credentials: ENCRYPTED[d6efdb7d6d4c61e3831df2193ca6348bb02f26cd931695f69d41930b1965f7dab72a838ca0902f6ed8cde66c7deddae2]


# Default VM to use unless set or modified by task
gce_instance:  &standard_vm
    image_project: "libpod-218412"
    zone: "us-central1-c"
    cpu: 2
    memory: "4Gb"
    disk: 200  # GB, do not set <200 per gcloud warning re: I/O performance
    image_name: "${FEDORA_NETAVARK_IMAGE}"


build_task:
  alias: "build"
  # Compiling is very CPU intensive, make it chooch quicker for this task only
  gce_instance: &builder_vm
    <<: *standard_vm
    cpu: 8
    memory: "8Gb"
  cargo_cache: &cargo_cache
    # Populating this cache depends on execution of setup.sh, and runner.sh
    # to builds of all release, debug, plus unit-tests.
    folder: "$CARGO_HOME"
    # Cirrus-CI will automatically store separate caches for branches vs PRs.
    # We use the branch-name here mainly to distinguish PR-level caches in
    # order to properly support backport-PRs to release branches.  Otherwise
    # all PRs & branches will share caches with other PRs and branches
    # for a given $DEST_BRANCH and vX value.  Adjust vX if cache schema
    # changes.
    fingerprint_key: "cargo_v1_${DEST_BRANCH}"
    # Required to be set explicitly since fingerprint_key is also set
    reupload_on_changes: true
  targets_cache: &targets_cache
    # Similar to cargo_cache, but holds the actual compiled artifacts. This must
    # be scoped similar to bin_cache to avoid binary pollution across cache
    # contexts.  For example, two PRs that happen to coincidentally change
    # and use cache.  Adjust vX if cache schema changes.
    folder: "$CARGO_TARGET_DIR"
    fingerprint_key: "targets_v1_${CIRRUS_BUILD_ID}" # Cache only within same build
    reupload_on_changes: true
  bin_cache: &bin_cache
    # This simply prevents rebuilding bin/netavark for every subsequent task.
    folder: "$CIRRUS_WORKING_DIR/bin"
    # Avoid binary pollution by scoping this to only this specific build.
    # Adjust vX if cache schema changes.
    fingerprint_key: "bin_v1_${CIRRUS_BUILD_ID}" # Cache only within same build
    reupload_on_changes: true
  setup_script: &setup "$SCRIPT_BASE/setup.sh $CIRRUS_TASK_NAME"
  main_script: &main "$SCRIPT_BASE/runner.sh $CIRRUS_TASK_NAME"
  upload_caches: [ "cargo", "targets", "bin" ]


validate_task:
  alias: "validate"
  depends_on:
    - "build"
  # From this point forward, all cache's become read-only - meaning
  # any changes made in this task aren't re-uploaded to the cache.
  # This avoids some flapping between tasks, along with the upload time.
  cargo_cache: &ro_cargo_cache
    <<: *cargo_cache
    reupload_on_changes: false
  targets_cache: &ro_targets_cache
    <<: *targets_cache
    reupload_on_changes: false
  bin_cache: &ro_bin_cache
    <<: *bin_cache
    reupload_on_changes: false
  setup_script: *setup
  main_script: *main


verify_vendor_task:
  alias: "verify_vendor"
  depends_on:
    - "build"
  cargo_cache: *ro_cargo_cache
  targets_cache: *ro_targets_cache
  bin_cache: *ro_bin_cache
  setup_script: *setup
  main_script: *main


cross_task:
  alias: "cross"
  depends_on:
    - "build"
  gce_instance: *builder_vm
  env:
    # Space-separated list of targets to test
    CROSS_TARGETS: >-
        x86_64-unknown-linux-gnu
        aarch64-unknown-linux-gnu
        powerpc64le-unknown-linux-gnu
        s390x-unknown-linux-gnu
  cargo_cache: *ro_cargo_cache
  targets_cache: *ro_targets_cache
  bin_cache: *ro_bin_cache
  setup_script: *setup
  main_script: *main


unit_task:
  alias: "unit"
  depends_on:
    - "build"
  cargo_cache: *ro_cargo_cache
  targets_cache: *ro_targets_cache
  bin_cache: *ro_bin_cache
  setup_script: *setup
  main_script: *main


integration_task:
  alias: "integration"
  depends_on:
    - "unit"
  cargo_cache: *ro_cargo_cache
  targets_cache: *ro_targets_cache
  bin_cache: *ro_bin_cache
  setup_script: *setup
  main_script: *main


# This task is critical.  It updates the "last-used by" timestamp stored
# in metadata for all VM images.  This mechanism functions in tandem with
# an out-of-band pruning operation to remove disused VM images.
meta_task:
    alias: meta
    name: "VM img. keepalive"
    container:
        cpu: 2
        memory: 2
        image: quay.io/libpod/imgts:$IMAGE_SUFFIX
    env:
        # Space-separated list of images used by this repository state
        IMGNAMES: "${FEDORA_NETAVARK_IMAGE}"
        BUILDID: "${CIRRUS_BUILD_ID}"
        REPOREF: "${CIRRUS_REPO_NAME}"
        GCPJSON: ENCRYPTED[e7e6e13b98eb34f480a12412a048e3fb78a02239c229659e136b7a27e2ab25a5bbb61ab6016e322cb6f777fa2c9f9520]
        GCPNAME: ENCRYPTED[f3fc6da8fe283ef506d7b18467a81153ea8e18b1d3cd76e79dcd6f566f20fdd3651522432d3d232f4d69eeb1502d1f6b]
        GCPPROJECT: libpod-218412
    clone_script: &noop mkdir -p $CIRRUS_WORKING_DIR  # source not needed
    script: /usr/local/bin/entrypoint.sh


success_task:
  name: "Total success"
  alias: success
  depends_on:
    - "build"
    - "validate"
    - "verify_vendor"
    - "unit"
    - "integration"
    - "meta"
  env:
    CIRRUS_SHELL: "/bin/sh"
  clone_script: *noop
  bin_cache: *ro_bin_cache
  # The paths used for uploaded artifacts are relative here and in Cirrus
  script:
    - mv bin/* ./
    - rm -rf bin
  # Upload tested binary for consumption downstream
  # https://cirrus-ci.org/guide/writing-tasks/#artifacts-instruction
  binary_artifacts:
    path: ./*netavark*
